# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by Django 5.1.1 on 2025-06-09 09:57


from django.db import migrations


def add_field_to_json(apps, schema_editor):
    model_field_defaults = {
        "Cluster": [
            ("state", None),
            ("config_id", None),
            ("hc", []),
            ("config_host_groups", {}),
            ("action_host_groups", {}),
            ("services", []),
            ("deleted_services", {}),
            ("service_deleted_components", {}),
        ],
        "Provider": [
            ("state", None),
            ("config_id", None),
            ("config_host_groups", {}),
        ],
        "Host": [
            ("state", None),
            ("config_id", None),
        ],
        "Service": [
            ("state", None),
            ("config_id", None),
            ("config_host_groups", {}),
            ("action_host_groups", {}),
        ],
        "Component": [
            ("state", None),
            ("config_id", None),
            ("config_host_groups", {}),
            ("action_host_groups", {}),
        ],
    }

    for model_name, fields in model_field_defaults.items():
        Model = apps.get_model("cm", model_name)

        for obj in Model.objects.iterator():
            changed = False

            if obj.before_upgrade == {"state": None}:
                continue

            for field, default in fields:
                if field not in obj.before_upgrade:
                    obj.before_upgrade[field] = default
                    changed = True

            if "groups" in obj.before_upgrade:
                config_host_groups = {
                    group_name: {"config_id": data["group_config_id"], "hosts": data["hosts"]}
                    for group_name, data in obj.before_upgrade["groups"].items()
                }

                obj.before_upgrade["config_host_groups"] = config_host_groups
                del obj.before_upgrade["groups"]
                changed = True

            if changed:
                obj.save(update_fields=["before_upgrade"])


class Migration(migrations.Migration):
    dependencies = [
        ("cm", "0140_config_revision"),
    ]

    operations = [
        migrations.RunPython(add_field_to_json),
    ]
