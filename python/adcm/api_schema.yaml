openapi: 3.0.3
info:
  title: ADCM API
  version: 0.1.0
  description: Arenadata Cluster Manager
components:
  schemas:
    ActionConfiguration:
      type: object
      properties:
        configSchema:
          type: object
          additionalProperties: {}
        config:
          type: object
          additionalProperties: {}
        adcmMeta:
          type: object
          additionalProperties: {}
      required:
      - adcmMeta
      - config
      - configSchema
    ActionEnum:
      enum:
      - add
      - remove
      type: string
      description: |-
        * `add` - add
        * `remove` - remove
    ActionHostGroup:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 150
        description:
          type: string
          maxLength: 255
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/ShortHost'
          readOnly: true
      required:
      - id
      - name
      - description
      - hosts
    ActionHostGroupCreate:
      type: object
      properties:
        name:
          type: string
          maxLength: 150
        description:
          type: string
          default: ''
          maxLength: 255
      required:
      - name
    ActionList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        startImpossibleReason:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - name
      - startImpossibleReason
    ActionName:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
      required:
      - id
      - name
    ActionRetrieve:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        startImpossibleReason:
          type: string
          nullable: true
          readOnly: true
        isAllowToTerminate:
          type: boolean
        hostComponentMapRules:
          type: array
          items:
            $ref: '#/components/schemas/HCMapRuleEntry'
          readOnly: true
        disclaimer:
          type: string
          readOnly: true
        configuration:
          allOf:
          - $ref: '#/components/schemas/ActionConfiguration'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - startImpossibleReason
      - isAllowToTerminate
      - hostComponentMapRules
      - disclaimer
      - configuration
    ActionRun:
      type: object
      properties:
        hostComponentMap:
          type: array
          items:
            $ref: '#/components/schemas/HostComponentEntry'
        configuration:
          allOf:
          - $ref: '#/components/schemas/ActionRunConfiguration'
          nullable: true
        isVerbose:
          type: boolean
          default: false
        shouldBlockObject:
          type: boolean
          default: true
    ActionRunConfiguration:
      type: object
      properties:
        config:
          type: object
          additionalProperties: {}
        adcmMeta:
          type: object
          additionalProperties: {}
      required:
      - adcmMeta
      - config
    Adcm:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/NameEnum'
        state:
          type: string
          maxLength: 1000
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
      required:
      - id
      - name
      - state
      - multiState
      - prototype
      - concerns
    AddHost:
      type: object
      properties:
        hostId:
          type: integer
      required:
      - hostId
    AnsibleConfigRetrieve:
      type: object
      properties:
        config:
          type: object
          additionalProperties: {}
          readOnly: true
        adcmMeta:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - config
      - adcmMeta
    AnsibleConfigUpdate:
      type: object
      properties:
        config:
          type: object
          additionalProperties: {}
          writeOnly: true
      required:
      - config
    AuditLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        type:
          $ref: '#/components/schemas/AuditLogTypeEnum'
        result:
          $ref: '#/components/schemas/AuditLogResultEnum'
        time:
          type: string
          format: date-time
        object:
          allOf:
          - $ref: '#/components/schemas/AuditObject'
          nullable: true
        user:
          allOf:
          - $ref: '#/components/schemas/AuditUserShort'
          nullable: true
        objectChanges:
          type: object
          additionalProperties: {}
      required:
      - id
      - name
      - type
      - result
      - time
      - object
      - user
      - objectChanges
    AuditLogResultEnum:
      enum:
      - success
      - fail
      - denied
      type: string
      description: |-
        * `success` - success
        * `fail` - fail
        * `denied` - denied
    AuditLogTypeEnum:
      enum:
      - create
      - update
      - delete
      type: string
      description: |-
        * `create` - create
        * `update` - update
        * `delete` - delete
    AuditObject:
      type: object
      properties:
        id:
          type: integer
        type:
          $ref: '#/components/schemas/AuditObjectTypeEnum'
        name:
          type: string
      required:
      - id
      - name
      - type
    AuditObjectTypeEnum:
      enum:
      - prototype
      - cluster
      - service
      - component
      - host
      - provider
      - bundle
      - adcm
      - user
      - group
      - role
      - policy
      - action-host-group
      type: string
      description: |-
        * `prototype` - prototype
        * `cluster` - cluster
        * `service` - service
        * `component` - component
        * `host` - host
        * `provider` - provider
        * `bundle` - bundle
        * `adcm` - adcm
        * `user` - user
        * `group` - group
        * `role` - role
        * `policy` - policy
        * `action-host-group` - action-host-group
    AuditSession:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/AuditUserShort'
          readOnly: true
          nullable: true
        result:
          $ref: '#/components/schemas/AuditSessionResultEnum'
        time:
          type: string
          format: date-time
        details:
          type: object
          additionalProperties: {}
      required:
      - id
      - user
      - result
      - time
      - details
    AuditSessionResultEnum:
      enum:
      - success
      - wrong password
      - account disabled
      - user not found
      type: string
      description: |-
        * `success` - success
        * `wrong password` - wrong password
        * `account disabled` - account disabled
        * `user not found` - user not found
    AuditUserShort:
      type: object
      properties:
        name:
          type: string
          readOnly: true
      required:
      - name
    Bundle:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          readOnly: true
        version:
          type: string
          maxLength: 1000
        edition:
          type: string
        mainPrototype:
          allOf:
          - $ref: '#/components/schemas/MainPrototype'
          readOnly: true
        uploadTime:
          type: string
          format: date-time
          readOnly: true
        signatureStatus:
          $ref: '#/components/schemas/SignatureStatusEnum'
      required:
      - id
      - name
      - displayName
      - version
      - edition
      - mainPrototype
      - uploadTime
      - signatureStatus
    BundleRelated:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        edition:
          type: string
      required:
      - id
      - edition
    CHG:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        description:
          type: string
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/HostShort'
          readOnly: true
      required:
      - id
      - name
      - description
      - hosts
    CauseEnum:
      enum:
      - config
      - job
      - host-component
      - import
      - service
      - requirement
      type: string
      description: |-
        * `config` - config
        * `job` - job
        * `host-component` - host-component
        * `import` - import
        * `service` - service
        * `requirement` - requirement
    Cluster:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        description:
          type: string
        state:
          type: string
          maxLength: 1000
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
        prototype:
          $ref: '#/components/schemas/PrototypeRelated'
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
        isUpgradable:
          type: boolean
          readOnly: true
        mainInfo:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - name
      - description
      - state
      - multiState
      - status
      - prototype
      - concerns
      - isUpgradable
      - mainInfo
    ClusterCreate:
      type: object
      properties:
        prototypeId:
          type: integer
        name:
          type: string
          maxLength: 150
          minLength: 2
        description:
          type: string
          default: ''
      required:
      - name
      - prototypeId
    ClusterHostStatus:
      type: object
      properties:
        hostComponents:
          type: array
          items:
            $ref: '#/components/schemas/RelatedHostComponentsStatus'
      required:
      - hostComponents
    ClusterObjectCandidate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    ClusterRelated:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
      required:
      - id
      - name
    ClusterServiceEnum:
      enum:
      - cluster
      - service
      type: string
      description: |-
        * `cluster` - cluster
        * `service` - service
    ClusterStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        state:
          type: string
          maxLength: 1000
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
      required:
      - id
      - name
      - status
    Component:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
        state:
          type: string
          maxLength: 1000
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/HostShort'
          readOnly: true
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
        cluster:
          allOf:
          - $ref: '#/components/schemas/ClusterRelated'
          readOnly: true
        service:
          allOf:
          - $ref: '#/components/schemas/ServiceRelated'
          readOnly: true
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
        isMaintenanceModeAvailable:
          type: boolean
          readOnly: true
        maintenanceMode:
          allOf:
          - $ref: '#/components/schemas/MaintenanceModeEnum'
          readOnly: true
        mainInfo:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - name
      - displayName
      - status
      - state
      - multiState
      - hosts
      - prototype
      - cluster
      - service
      - concerns
      - isMaintenanceModeAvailable
      - maintenanceMode
      - mainInfo
    ComponentMaintenanceMode:
      type: object
      properties:
        maintenanceMode:
          $ref: '#/components/schemas/MaintenanceModeChangeEnum'
      required:
      - maintenanceMode
    ComponentMapping:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        isMaintenanceModeAvailable:
          type: boolean
          readOnly: true
        maintenanceMode:
          allOf:
          - $ref: '#/components/schemas/MaintenanceModeChangeEnum'
          readOnly: true
        constraints:
          type: array
          items: {}
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
        dependOn:
          type: array
          items:
            type: object
            properties:
              servicePrototype:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  displayName:
                    type: string
                  license:
                    type: object
                    properties:
                      status:
                        enum:
                        - absent
                        - accepted
                        - unaccepted
                        type: string
                      text:
                        type: string
                        nullable: true
                    required:
                    - status
                    - text
                  componentPrototypes:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      displayName:
                        type: string
                      version:
                        type: string
                    required:
                    - displayName
                    - id
                    - name
                    - version
                required:
                - componentPrototypes
                - displayName
                - id
                - license
                - name
            required:
            - servicePrototype
          nullable: true
          readOnly: true
        service:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          readOnly: true
      required:
      - constraints
      - dependOn
      - displayName
      - id
      - isMaintenanceModeAvailable
      - maintenanceMode
      - name
      - prototype
      - service
    ComponentStatus:
      type: object
      properties:
        hostComponents:
          type: array
          items:
            $ref: '#/components/schemas/RelatedHostComponentsHostStatus'
      required:
      - hostComponents
    Concern:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          $ref: '#/components/schemas/ConcernTypeEnum'
        reason:
          $ref: '#/components/schemas/Reason'
        isBlocking:
          type: boolean
        cause:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/CauseEnum'
          - $ref: '#/components/schemas/NullEnum'
        owner:
          type: object
          properties:
            id:
              type: integer
            type:
              type: string
              nullable: true
          required:
          - id
          - type
          readOnly: true
      required:
      - id
      - type
      - reason
      - isBlocking
      - cause
      - owner
    ConcernTypeEnum:
      enum:
      - lock
      - issue
      - flag
      type: string
      description: |-
        * `lock` - lock
        * `issue` - issue
        * `flag` - flag
    ConfigLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        isCurrent:
          type: boolean
          readOnly: true
        creationTime:
          type: string
          format: date-time
          readOnly: true
        config:
          type: object
          additionalProperties: {}
        adcmMeta:
          type: object
          additionalProperties: {}
        description:
          type: string
      required:
      - id
      - isCurrent
      - creationTime
      - config
      - adcmMeta
      - description
    ConfigLogList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        isCurrent:
          type: boolean
          readOnly: true
        creationTime:
          type: string
          format: date-time
          readOnly: true
        description:
          type: string
      required:
      - id
      - isCurrent
      - creationTime
      - description
    Error:
      type: object
      properties:
        code:
          type: string
        level:
          type: string
        desc:
          type: string
      required:
      - code
      - level
      - desc
    FormatEnum:
      enum:
      - txt
      - json
      type: string
      description: |-
        * `txt` - txt
        * `json` - json
    Group:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        displayName:
          type: string
          nullable: true
          maxLength: 1000
        description:
          type: string
          maxLength: 1000
        users:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUser'
        type:
          $ref: '#/components/schemas/OriginType'
      required:
      - id
      - name
      - displayName
      - description
      - users
      - type
    GroupCreate:
      type: object
      properties:
        displayName:
          type: string
          nullable: true
          maxLength: 1000
        description:
          type: string
          default: ''
          maxLength: 1000
        users:
          type: array
          items:
            type: integer
      required:
      - displayName
    GroupRelated:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
      required:
      - id
      - name
      - displayName
    HCComponentName:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        displayName:
          type: string
      required:
      - id
      - name
      - displayName
    HCMapRuleEntry:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        service:
          type: string
        component:
          type: string
      required:
      - action
      - service
      - component
    Host:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: fully qualified domain name
          maxLength: 253
        description:
          type: string
        state:
          type: string
          maxLength: 1000
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
        hostprovider:
          $ref: '#/components/schemas/ProviderParent'
        prototype:
          $ref: '#/components/schemas/PrototypeRelated'
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
        isMaintenanceModeAvailable:
          type: boolean
          readOnly: true
        maintenanceMode:
          $ref: '#/components/schemas/MaintenanceModeEnum'
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        cluster:
          allOf:
          - $ref: '#/components/schemas/HostCluster'
          readOnly: true
        components:
          type: array
          items:
            $ref: '#/components/schemas/HCComponentName'
          readOnly: true
      required:
      - id
      - name
      - description
      - state
      - status
      - hostprovider
      - prototype
      - concerns
      - isMaintenanceModeAvailable
      - maintenanceMode
      - multiState
      - cluster
      - components
    HostAdd:
      type: object
      properties:
        hostId:
          type: integer
      required:
      - hostId
    HostCHG:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    HostChangeMaintenanceMode:
      type: object
      properties:
        maintenanceMode:
          $ref: '#/components/schemas/MaintenanceModeChangeEnum'
      required:
      - maintenanceMode
    HostCluster:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
      required:
      - id
      - name
    HostComponent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        displayName:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
        isMaintenanceModeAvailable:
          type: boolean
          readOnly: true
        maintenanceMode:
          allOf:
          - $ref: '#/components/schemas/MaintenanceModeEnum'
          readOnly: true
        cluster:
          allOf:
          - $ref: '#/components/schemas/ClusterRelated'
          readOnly: true
        service:
          allOf:
          - $ref: '#/components/schemas/ServiceRelated'
          readOnly: true
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - status
      - concerns
      - isMaintenanceModeAvailable
      - maintenanceMode
      - cluster
      - service
      - prototype
    HostComponentEntry:
      type: object
      properties:
        hostId:
          type: integer
        componentId:
          type: integer
      required:
      - componentId
      - hostId
    HostCreate:
      type: object
      properties:
        name:
          type: string
          description: fully qualified domain name
          maxLength: 253
        hostproviderId:
          type: integer
        clusterId:
          type: integer
      required:
      - hostproviderId
      - name
    HostMapping:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        isMaintenanceModeAvailable:
          type: boolean
          readOnly: true
        maintenanceMode:
          $ref: '#/components/schemas/MaintenanceModeChangeEnum'
      required:
      - id
      - isMaintenanceModeAvailable
      - maintenanceMode
      - name
    HostObjectCandidate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    HostShort:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
      required:
      - id
      - name
    Import:
      type: object
      properties:
        importCluster:
          $ref: '#/components/schemas/UIImportCluster'
        importServices:
          type: array
          items:
            $ref: '#/components/schemas/UIIMportServices'
        binds:
          type: array
          items:
            $ref: '#/components/schemas/UIBind'
        cluster:
          allOf:
          - $ref: '#/components/schemas/ClusterStatus'
          readOnly: true
      required:
      - importCluster
      - importServices
      - binds
      - cluster
    ImportPost:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/Source'
      required:
      - source
    JobList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        startTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        endTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        duration:
          type: number
          format: double
          nullable: true
          readOnly: true
        isTerminatable:
          type: boolean
          readOnly: true
      required:
      - id
      - name
      - displayName
      - status
      - startTime
      - endTime
      - duration
      - isTerminatable
    JobRetrieve:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        parentTask:
          allOf:
          - $ref: '#/components/schemas/TaskRetrieveByJob'
          nullable: true
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        startTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        endTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        duration:
          type: number
          format: double
          nullable: true
          readOnly: true
        taskId:
          type: integer
          nullable: true
          readOnly: true
        isTerminatable:
          type: boolean
          readOnly: true
      required:
      - id
      - name
      - displayName
      - parentTask
      - status
      - startTime
      - endTime
      - duration
      - taskId
      - isTerminatable
    JobStatusEnum:
      enum:
      - revoked
      - created
      - scheduled
      - queued
      - success
      - failed
      - running
      - locked
      - aborted
      - broken
      type: string
      description: |-
        * `revoked` - revoked
        * `created` - created
        * `scheduled` - scheduled
        * `queued` - queued
        * `success` - success
        * `failed` - failed
        * `running` - running
        * `locked` - locked
        * `aborted` - aborted
        * `broken` - broken
    LicenseStatusEnum:
      enum:
      - absent
      - accepted
      - unaccepted
      type: string
      description: |-
        * `absent` - absent
        * `accepted` - accepted
        * `unaccepted` - unaccepted
    LogStorage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        type:
          $ref: '#/components/schemas/LogStorageTypeEnum'
        format:
          $ref: '#/components/schemas/FormatEnum'
        content:
          type: string
          readOnly: true
      required:
      - id
      - name
      - type
      - format
      - content
    LogStorageTypeEnum:
      enum:
      - stdout
      - stderr
      - check
      - custom
      type: string
      description: |-
        * `stdout` - stdout
        * `stderr` - stderr
        * `check` - check
        * `custom` - custom
    Login:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    MainPrototype:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/MainPrototypeTypeEnum'
        license:
          allOf:
          - $ref: '#/components/schemas/MainPrototypeLicense'
          readOnly: true
        version:
          type: string
      required:
      - description
      - displayName
      - id
      - license
      - name
      - type
      - version
    MainPrototypeLicense:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/LicenseStatusEnum'
        text:
          type: string
          nullable: true
          readOnly: true
      required:
      - status
      - text
    MainPrototypeTypeEnum:
      enum:
      - cluster
      - provider
      type: string
      description: |-
        * `cluster` - cluster
        * `provider` - provider
    MaintenanceModeChangeEnum:
      enum:
      - 'on'
      - 'off'
      type: string
      description: |-
        * `on` - on
        * `off` - off
    MaintenanceModeEnum:
      enum:
      - 'on'
      - 'off'
      - changing
      type: string
    Mapping:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        hostId:
          type: integer
        componentId:
          type: integer
      required:
      - componentId
      - hostId
      - id
    NameEnum:
      enum:
      - ADCM
      type: string
      description: '* `ADCM` - ADCM'
    NullEnum:
      enum:
      - null
    ObjectStatusEnum:
      enum:
      - up
      - down
      type: string
    ObjectTypeEnum:
      enum:
      - adcm
      - cluster
      - service
      - component
      - provider
      - host
      type: string
      description: |-
        * `adcm` - adcm
        * `cluster` - cluster
        * `service` - service
        * `component` - component
        * `provider` - provider
        * `host` - host
    OriginType:
      enum:
      - local
      - ldap
      type: string
      description: |-
        * `local` - local
        * `ldap` - ldap
    PaginatedActionHostGroupList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ActionHostGroup'
    PaginatedAuditLogList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
    PaginatedAuditSessionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditSession'
    PaginatedBundleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Bundle'
    PaginatedCHGList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/CHG'
    PaginatedClusterList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
    PaginatedComponentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Component'
    PaginatedConfigLogListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ConfigLogList'
    PaginatedGroupList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    PaginatedHostComponentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/HostComponent'
    PaginatedHostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Host'
    PaginatedImportList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Import'
    PaginatedJobListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/JobList'
    PaginatedPolicyList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
    PaginatedPrototypeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Prototype'
    PaginatedProviderSchemaList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProviderSchema'
    PaginatedRelatedHostsStatusesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/RelatedHostsStatuses'
    PaginatedRelatedServicesStatusesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/RelatedServicesStatuses'
    PaginatedRoleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    PaginatedServiceRetrieveList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRetrieve'
    PaginatedTaskListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskList'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedCHG:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        description:
          type: string
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/HostShort'
          readOnly: true
    PatchedClusterUpdate:
      type: object
      properties:
        name:
          type: string
          description: Cluster name
          maxLength: 150
          minLength: 2
        description:
          type: string
    PatchedGroupUpdate:
      type: object
      properties:
        displayName:
          type: string
          nullable: true
          maxLength: 1000
        description:
          type: string
          maxLength: 1000
        users:
          type: array
          items:
            type: integer
    PatchedHostUpdate:
      type: object
      properties:
        name:
          type: string
          description: fully qualified domain name
          maxLength: 253
        description:
          type: string
    PatchedPolicyUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        description:
          type: string
        objects: {}
        groups:
          type: array
          items:
            type: integer
        role:
          $ref: '#/components/schemas/PolicyRoleCreate'
    PatchedProfileUpdate:
      type: object
      properties:
        newPassword:
          type: string
          writeOnly: true
        currentPassword:
          type: string
          writeOnly: true
    PatchedRoleUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        description:
          type: string
        children:
          type: array
          items:
            type: integer
    PatchedUserUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
        firstName:
          type: string
          maxLength: 150
          pattern: ^[^\n]*$
        lastName:
          type: string
          maxLength: 150
          pattern: ^[^\n]*$
        groups:
          type: array
          items:
            type: integer
          writeOnly: true
          nullable: true
        email:
          type: string
          format: email
        isSuperUser:
          type: boolean
    Policy:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        description:
          type: string
        isBuiltIn:
          type: boolean
          readOnly: true
        objects: {}
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupRelated'
        role:
          allOf:
          - $ref: '#/components/schemas/RoleRelated'
          readOnly: true
      required:
      - id
      - name
      - description
      - isBuiltIn
      - objects
      - groups
      - role
    PolicyCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        description:
          type: string
        objects: {}
        groups:
          type: array
          items:
            type: integer
        role:
          $ref: '#/components/schemas/PolicyRoleCreate'
      required:
      - groups
      - id
      - name
      - objects
      - role
    PolicyRoleCreate:
      type: object
      properties:
        id:
          type: integer
      required:
      - id
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        firstName:
          type: string
          readOnly: true
        lastName:
          type: string
          readOnly: true
        isSuperUser:
          type: boolean
          readOnly: true
        authSettings:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - id
      - username
      - email
      - firstName
      - lastName
      - isSuperUser
      - authSettings
    ProfileUpdate:
      type: object
      properties:
        newPassword:
          type: string
          writeOnly: true
        currentPassword:
          type: string
          writeOnly: true
      required:
      - newPassword
      - currentPassword
    Prototype:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        description:
          type: string
        type:
          $ref: '#/components/schemas/ObjectTypeEnum'
        bundle:
          $ref: '#/components/schemas/BundleRelated'
        license:
          type: object
          properties:
            status:
              enum:
              - absent
              - accepted
              - unaccepted
              type: string
            text:
              type: string
              nullable: true
          required:
          - status
          - text
          readOnly: true
        version:
          type: string
          maxLength: 1000
      required:
      - id
      - name
      - displayName
      - description
      - type
      - bundle
      - license
      - version
    PrototypeRelated:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        version:
          type: string
          maxLength: 1000
      required:
      - id
      - name
      - displayName
      - version
    PrototypeVersion:
      type: object
      properties:
        id:
          type: integer
        bundle:
          allOf:
          - $ref: '#/components/schemas/BundleRelated'
          readOnly: true
        version:
          type: string
        licenseStatus:
          $ref: '#/components/schemas/LicenseStatusEnum'
      required:
      - bundle
      - id
      - licenseStatus
      - version
    PrototypeVersions:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/PrototypeVersion'
          readOnly: true
      required:
      - displayName
      - name
      - versions
    Provider:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        state:
          type: string
          readOnly: true
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
        description:
          type: string
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
        isUpgradable:
          type: boolean
          readOnly: true
        mainInfo:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - name
      - state
      - multiState
      - prototype
      - description
      - concerns
      - isUpgradable
      - mainInfo
    ProviderCreate:
      type: object
      properties:
        prototypeId:
          type: integer
        name:
          type: string
        description:
          type: string
      required:
      - name
      - prototypeId
    ProviderObjectCandidate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    ProviderParent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          readOnly: true
      required:
      - id
      - name
      - displayName
    ProviderSchema:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        state:
          type: string
          readOnly: true
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
        description:
          type: string
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
        isUpgradable:
          type: boolean
          readOnly: true
        mainInfo:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - name
      - state
      - multiState
      - prototype
      - description
      - concerns
      - isUpgradable
      - mainInfo
    Reason:
      type: object
      properties:
        message:
          type: string
        placeholder:
          type: object
          additionalProperties: {}
      required:
      - message
      - placeholder
    RelatedComponentStatus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - status
    RelatedComponentsStatuses:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - status
    RelatedGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        displayName:
          type: string
          readOnly: true
      required:
      - id
      - name
      - displayName
    RelatedHostComponentsHostStatus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
      required:
      - id
      - name
      - status
    RelatedHostComponentsStatus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - status
    RelatedHostsStatuses:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
      required:
      - id
      - name
      - status
    RelatedServicesStatuses:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
        components:
          type: array
          items:
            $ref: '#/components/schemas/RelatedComponentStatus'
      required:
      - id
      - name
      - displayName
      - status
      - components
    RelatedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
      required:
      - id
      - username
    Role:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          maxLength: 1000
        isBuiltIn:
          type: boolean
          readOnly: true
          default: false
        isAnyCategory:
          type: boolean
          readOnly: true
          default: false
        categories:
          type: array
          items:
            type: string
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/RoleTypeEnum'
          readOnly: true
        parametrizedByType: {}
        description:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/RoleChild'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - isBuiltIn
      - isAnyCategory
      - categories
      - type
      - parametrizedByType
      - description
      - children
    RoleChild:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          maxLength: 1000
        isBuiltIn:
          type: boolean
          readOnly: true
          default: false
        isAnyCategory:
          type: boolean
          readOnly: true
          default: false
        categories:
          type: array
          items:
            type: string
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/RoleTypeEnum'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - isBuiltIn
      - isAnyCategory
      - categories
      - type
    RoleCreate:
      type: object
      properties:
        name:
          type: string
          default: ''
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        description:
          type: string
        children:
          type: array
          items:
            type: integer
      required:
      - name
      - displayName
      - description
      - children
    RoleObjectCandidates:
      type: object
      properties:
        cluster:
          type: array
          items:
            $ref: '#/components/schemas/ClusterObjectCandidate'
        provider:
          type: array
          items:
            $ref: '#/components/schemas/ProviderObjectCandidate'
        service:
          type: array
          items:
            $ref: '#/components/schemas/ServiceObjectCandidate'
        host:
          type: array
          items:
            $ref: '#/components/schemas/HostObjectCandidate'
      required:
      - cluster
      - provider
      - service
      - host
    RoleRelated:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
      required:
      - id
      - name
    RoleTypeEnum:
      enum:
      - business
      - role
      - hidden
      type: string
      description: |-
        * `business` - business
        * `role` - role
        * `hidden` - hidden
    ServiceCreate:
      type: object
      properties:
        prototypeId:
          type: integer
      required:
      - prototypeId
    ServiceMaintenanceMode:
      type: object
      properties:
        maintenanceMode:
          $ref: '#/components/schemas/MaintenanceModeChangeEnum'
      required:
      - maintenanceMode
    ServiceName:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        state:
          type: string
          maxLength: 1000
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
      required:
      - displayName
      - id
      - name
      - prototype
    ServiceObjectCandidate:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/ClusterObjectCandidate'
      required:
      - name
      - displayName
      - clusters
    ServicePrototype:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        version:
          type: string
          maxLength: 1000
        isRequired:
          type: boolean
        dependOn:
          type: array
          items:
            type: object
            properties:
              servicePrototype:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  displayName:
                    type: string
                  license:
                    type: object
                    properties:
                      status:
                        enum:
                        - absent
                        - accepted
                        - unaccepted
                        type: string
                      text:
                        type: string
                        nullable: true
                    required:
                    - status
                    - text
                  componentPrototypes:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      displayName:
                        type: string
                      version:
                        type: string
                    required:
                    - displayName
                    - id
                    - name
                    - version
                required:
                - componentPrototypes
                - displayName
                - id
                - license
                - name
            required:
            - servicePrototype
          nullable: true
          readOnly: true
        license:
          type: object
          properties:
            status:
              enum:
              - absent
              - accepted
              - unaccepted
              type: string
            text:
              type: string
              nullable: true
          required:
          - status
          - text
          readOnly: true
      required:
      - dependOn
      - id
      - isRequired
      - license
      - name
      - version
    ServiceRelated:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
      required:
      - displayName
      - id
      - name
    ServiceRetrieve:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        displayName:
          type: string
          readOnly: true
        prototype:
          allOf:
          - $ref: '#/components/schemas/PrototypeRelated'
          readOnly: true
        cluster:
          allOf:
          - $ref: '#/components/schemas/ClusterRelated'
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ObjectStatusEnum'
          readOnly: true
        state:
          type: string
          maxLength: 1000
        multiState:
          type: array
          items:
            type: string
          description: Easy to operate self._multi_state representation
          readOnly: true
        concerns:
          type: array
          items:
            $ref: '#/components/schemas/Concern'
          readOnly: true
        isMaintenanceModeAvailable:
          type: boolean
          readOnly: true
        maintenanceMode:
          allOf:
          - $ref: '#/components/schemas/MaintenanceModeEnum'
          readOnly: true
        mainInfo:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - name
      - description
      - displayName
      - prototype
      - cluster
      - status
      - state
      - multiState
      - concerns
      - isMaintenanceModeAvailable
      - maintenanceMode
      - mainInfo
    ServiceStatus:
      type: object
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/RelatedComponentsStatuses'
      required:
      - components
    SetMapping:
      type: object
      properties:
        hostId:
          type: integer
        componentId:
          type: integer
      required:
      - componentId
      - hostId
    ShortHost:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    SignatureStatusEnum:
      enum:
      - valid
      - invalid
      - absent
      type: string
      description: |-
        * `valid` - valid
        * `invalid` - invalid
        * `absent` - absent
    Source:
      type: object
      properties:
        id:
          type: integer
        type:
          $ref: '#/components/schemas/ClusterServiceEnum'
      required:
      - id
      - type
    TaskList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        action:
          allOf:
          - $ref: '#/components/schemas/ActionName'
          readOnly: true
          nullable: true
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        startTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        endTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        duration:
          type: number
          format: double
          nullable: true
          readOnly: true
        isTerminatable:
          type: boolean
          readOnly: true
        childJobs:
          type: array
          items:
            $ref: '#/components/schemas/JobList'
          readOnly: true
        objects:
          type: array
          items:
            $ref: '#/components/schemas/TaskObjectsField'
          readOnly: true
      required:
      - id
      - name
      - displayName
      - action
      - status
      - startTime
      - endTime
      - duration
      - isTerminatable
      - childJobs
      - objects
    TaskObjectsField:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/TaskObjectsFieldTypeEnum'
      required:
      - id
      - name
      - type
    TaskObjectsFieldTypeEnum:
      enum:
      - adcm
      - cluster
      - service
      - component
      - provider
      - host
      - action_host_group
      type: string
      description: |-
        * `adcm` - adcm
        * `cluster` - cluster
        * `service` - service
        * `component` - component
        * `provider` - provider
        * `host` - host
        * `action_host_group` - action_host_group
    TaskRetrieveByJob:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        action:
          allOf:
          - $ref: '#/components/schemas/ActionName'
          readOnly: true
          nullable: true
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        startTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        endTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        duration:
          type: number
          format: double
          nullable: true
          readOnly: true
        objects:
          type: array
          items:
            $ref: '#/components/schemas/TaskObjectsField'
          readOnly: true
        isTerminatable:
          type: boolean
          readOnly: true
      required:
      - action
      - displayName
      - duration
      - endTime
      - id
      - isTerminatable
      - name
      - objects
      - startTime
      - status
    Token:
      type: object
      properties:
        token:
          type: string
          readOnly: true
          description: Authentication token for the user
      required:
      - token
    UIBind:
      type: object
      properties:
        id:
          type: integer
        source:
          $ref: '#/components/schemas/UIBindSource'
      required:
      - id
      - source
    UIBindSource:
      type: object
      properties:
        id:
          type: integer
        type:
          $ref: '#/components/schemas/ClusterServiceEnum'
      required:
      - id
      - type
    UIIMportServices:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
        version:
          type: string
        isRequired:
          type: boolean
        isMultiBind:
          type: boolean
        prototype:
          $ref: '#/components/schemas/UIPrototype'
      required:
      - id
      - name
      - displayName
      - version
      - isRequired
      - isMultiBind
      - prototype
    UIImportCluster:
      type: object
      properties:
        id:
          type: integer
        isMultiBind:
          type: boolean
        isRequired:
          type: boolean
        prototype:
          $ref: '#/components/schemas/UIPrototype'
      required:
      - id
      - isMultiBind
      - isRequired
      - prototype
    UIPrototype:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
        version:
          type: string
      required:
      - id
      - name
      - displayName
      - version
    UpgradeBundle:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        prototypeId:
          type: integer
          readOnly: true
        licenseStatus:
          type: string
          readOnly: true
        unacceptedServicesPrototypes:
          type: array
          items: {}
          readOnly: true
      required:
      - id
      - prototypeId
      - licenseStatus
      - unacceptedServicesPrototypes
    UpgradeList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
      required:
      - id
    UpgradeRetrieve:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 1000
        displayName:
          type: string
          maxLength: 1000
        isAllowToTerminate:
          type: boolean
          readOnly: true
        hostComponentMapRules:
          type: array
          items:
            $ref: '#/components/schemas/HCMapRuleEntry'
          readOnly: true
        configuration:
          allOf:
          - $ref: '#/components/schemas/ActionConfiguration'
          readOnly: true
        disclaimer:
          type: string
          readOnly: true
        bundle:
          $ref: '#/components/schemas/UpgradeBundle'
      required:
      - id
      - name
      - displayName
      - isAllowToTerminate
      - hostComponentMapRules
      - configuration
      - disclaimer
      - bundle
    UpgradeRun:
      type: object
      properties:
        hostComponentMap:
          type: array
          items:
            $ref: '#/components/schemas/HostComponentEntry'
        configuration:
          allOf:
          - $ref: '#/components/schemas/ActionRunConfiguration'
          nullable: true
        isVerbose:
          type: boolean
          default: false
    UploadBundle:
      type: object
      properties:
        file:
          type: string
          format: uri
          description: bundle file for upload
      required:
      - file
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        firstName:
          type: string
          maxLength: 150
        lastName:
          type: string
          maxLength: 150
        status:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        type:
          $ref: '#/components/schemas/OriginType'
        isBuiltIn:
          type: boolean
          readOnly: true
        isSuperUser:
          type: boolean
          readOnly: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/RelatedGroup'
        blockingReason:
          type: string
          nullable: true
          readOnly: true
      required:
      - id
      - username
      - firstName
      - lastName
      - status
      - email
      - type
      - isBuiltIn
      - isSuperUser
      - groups
      - blockingReason
    UserCreate:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          pattern: ^[^\s]+$
        password:
          type: string
          writeOnly: true
        firstName:
          type: string
          default: ''
          maxLength: 150
          pattern: ^[^\n]*$
        lastName:
          type: string
          default: ''
          maxLength: 150
          pattern: ^[^\n]*$
        groups:
          type: array
          items:
            type: integer
          writeOnly: true
          nullable: true
        email:
          type: string
          format: email
          default: ''
        isSuperUser:
          type: boolean
          default: false
      required:
      - password
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
paths:
  /api/v2/adcm/:
    get:
      operationId: getADCMObject
      description: GET ADCM object.
      summary: GET ADCM object
      tags:
      - adcm
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Adcm'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/adcm/actions/:
    get:
      operationId: getADCMActions
      description: Get a list of ADCM's actions.
      summary: GET ADCM's actions
      parameters:
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      tags:
      - adcm
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/adcm/actions/{actionId}/:
    get:
      operationId: getADCMAction
      description: Get information about a specific ADCM's action.
      summary: GET ADCM's action
      parameters:
      - in: path
        name: actionId
        schema:
          type: integer
        required: true
      tags:
      - adcm
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/adcm/actions/{actionId}/run/:
    post:
      operationId: postADCMAction
      description: Run ADCM's action.
      summary: POST ADCM's action
      parameters:
      - in: path
        name: actionId
        schema:
          type: integer
        required: true
      tags:
      - adcm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/adcm/config-schema/:
    get:
      operationId: adcm_config_schema_retrieve
      description: Full representation of ADCM config.
      summary: Get ADCM config schema
      tags:
      - adcm
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/adcm/configs/:
    get:
      operationId: getADCMConfigs
      description: Get information about ADCM's config versions.
      summary: GET ADCM's config versions
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - adcm
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postADCMConfigs
      description: Create a new version of ADCM's configuration.
      summary: POST ADCM's configs
      tags:
      - adcm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/adcm/configs/{configId}/:
    get:
      operationId: getADCMConfig
      description: Get ADCM's configuration information.
      summary: GET ADCM's config
      parameters:
      - in: path
        name: configId
        schema:
          type: integer
        required: true
      tags:
      - adcm
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/audit/logins/:
    get:
      operationId: getAuditLogins
      description: Get information about auditing user authorizations in ADCM.
      summary: GET audit logins
      parameters:
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by id.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: login
        schema:
          type: string
        description: Case insensitive and partial filter by user login.
      - in: query
        name: loginResult
        schema:
          type: string
          enum:
          - account disabled
          - success
          - user not found
          - wrong password
        description: Filter by login result.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -loginTime
          - -time
          - loginTime
          - time
          default: -loginTime
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: timeFrom
        schema:
          type: string
          format: date
        description: Filter by time from.
      - in: query
        name: timeTo
        schema:
          type: string
          format: date
        description: Filter by time to.
      tags:
      - audit
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditSessionList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/audit/logins/{auditLoginId}/:
    get:
      operationId: getAuditLogin
      description: Get information about a specific user authorization in ADCM.
      summary: GET audit login
      parameters:
      - in: path
        name: auditLoginId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - audit
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditSession'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/audit/operations/:
    get:
      operationId: getAuditOperations
      description: Get a list of audited ADCM operations.
      summary: GET audit operations
      parameters:
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by id.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: objectName
        schema:
          type: string
        description: Case insensitive and partial filter by object name.
      - in: query
        name: objectType
        schema:
          type: string
          enum:
          - action-host-group
          - adcm
          - bundle
          - cluster
          - component
          - group
          - host
          - policy
          - prototype
          - provider
          - role
          - service
          - user
        description: Filter by object type.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: operationResult
        schema:
          type: string
          enum:
          - denied
          - fail
          - success
        description: Filter by operation result.
      - in: query
        name: operationType
        schema:
          type: string
          enum:
          - create
          - delete
          - update
        description: Filter by operation type.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -name
          - -objectName
          - -objectType
          - -result
          - -time
          - -type
          - -userName
          - name
          - objectName
          - objectType
          - result
          - time
          - type
          - userName
          default: -time
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: timeFrom
        schema:
          type: string
          format: date
        description: Filter by time from.
      - in: query
        name: timeTo
        schema:
          type: string
          format: date
        description: Filter by time to.
      - in: query
        name: userName
        schema:
          type: string
        description: Case insensitive and partial filter by user name.
      - in: query
        name: username
        schema:
          type: string
        description: Case insensitive and partial filter by user name.
      tags:
      - audit
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuditLogList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/audit/operations/{auditOperationId}/:
    get:
      operationId: getAuditOperation
      description: Get information about a specific ADCM operation being audited.
      summary: GET audit operation
      parameters:
      - in: path
        name: auditOperationId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - audit
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/bundles/:
    get:
      operationId: getBundles
      description: Get a list of ADCM bundles with information on them.
      parameters:
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by id.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -displayName
          - -uploadTime
          - displayName
          - uploadTime
          default: displayName
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: product
        schema:
          type: string
        description: Case insensitive filter by product.
      tags:
      - bundles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBundleList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postBundles
      description: Upload new bundle.
      tags:
      - bundles
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadBundle'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/bundles/{bundleId}/:
    get:
      operationId: getBundle
      description: Get detail information about a specific bundle.
      parameters:
      - in: path
        name: bundleId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - bundles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteBundle
      description: Delete a specific ADCM bundle.
      parameters:
      - in: path
        name: bundleId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - bundles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/:
    get:
      operationId: getClusters
      description: Get a list of ADCM clusters with information on them.
      summary: GET clusters
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by cluster name.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -name
          - -prototypeDisplayName
          - name
          - prototypeDisplayName
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeDisplayName
        schema:
          type: string
        description: Filter by prototype display name.
      - in: query
        name: prototypeName
        schema:
          type: string
        description: Filter by prototype name.
      - in: query
        name: status
        schema:
          type: string
          enum:
          - down
          - up
        description: Status filter.
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClusterList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postCluster
      description: Create a new ADCM cluster.
      summary: POST cluster
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClusterCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClusterCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/:
    get:
      operationId: getClusterActionHostGroups
      description: Return list of cluster's action host groups.
      summary: GET cluster's Action Host Groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hasHost
        schema:
          type: string
        description: Case insensitive and partial filter by host
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActionHostGroupList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterActionHostGroup
      description: Create a new cluster's action host group.
      summary: POST cluster's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHostGroup'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/actions/:
    get:
      operationId: getClusterActionHostGroupActions
      description: Get a list of cluster's action host group's actions.
      summary: GET cluster's action host group's actions
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/actions/{actionId}/:
    get:
      operationId: getClusterActionHostGroupAction
      description: Get information about a specific cluster's action host group's
        action.
      summary: GET cluster's action host group's action
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/actions/{actionId}/run/:
    post:
      operationId: postClusterActionHostGroupAction
      description: Run cluster's action host group's action.
      summary: POST cluster's action host group's action
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/hosts/:
    get:
      operationId: getClusterActionHostGroupHosts
      description: Get information about cluster's Action Host Group hosts.
      summary: GET cluster's action host group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterActionHostGroupHosts
      description: Add hosts to cluster's action host group.
      summary: POST cluster's Action Host Group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddHost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddHost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddHost'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortHost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/hosts/{hostId}/:
    get:
      operationId: clusters_action_host_groups_hosts_retrieve
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddHost'
          description: ''
    delete:
      operationId: deleteClusterActionHostGroupHosts
      description: Delete specific host from cluster's action host group.
      summary: DELETE cluster's Action Host Group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/:
    get:
      operationId: getClusterActionHostGroup
      description: Return information about specific cluster's action host group.
      summary: GET cluster's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHostGroup'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteClusterActionHostGroup
      description: Delete specific cluster's action host group.
      summary: DELETE cluster's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/{actionHostGroupId}/host-candidates/:
    get:
      operationId: getClusterActionHostGroupCandidates
      description: Return list of cluster's hosts that can be added to action host
        group.
      summary: GET cluster's Action Host Group's host candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/action-host-groups/host-candidates/:
    get:
      operationId: getClusterActionHostGroupOwnCandidates
      description: Return list of cluster's hosts that can be added to newly created
        action host group.
      summary: GET cluster's host candidates for new Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/actions/:
    get:
      operationId: getClusterActions
      description: Get a list of cluster's actions.
      summary: GET cluster's actions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/actions/{actionId}/:
    get:
      operationId: getClusterAction
      description: Get information about a specific cluster's action.
      summary: GET cluster's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/actions/{actionId}/run/:
    post:
      operationId: postClusterAction
      description: Run cluster's action.
      summary: POST cluster's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/:
    get:
      operationId: getClusterConfigGroups
      description: Get information about cluster's config-groups.
      summary: GET cluster's config groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCHGList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterConfigGroups
      description: Create new cluster's config-group.
      summary: POST cluster's config-groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CHG'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/configs/:
    get:
      operationId: getClusterConfigGroupConfigs
      description: Get information about cluster config group's config versions.
      summary: GET cluster config group's config versions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterConfigGroupConfigs
      description: Create a new version of cluster config group's configuration.
      summary: POST cluster config group's configs
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/configs/{configId}/:
    get:
      operationId: getClusterConfigGroupConfig
      description: Get cluster config group's configuration information.
      summary: GET cluster config group's config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/hosts/:
    get:
      operationId: getClusterConfigGroupHosts
      description: Get a list of hosts added to cluster's config-group.
      summary: GET cluster's config-group hosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterConfigGroupHosts
      description: Add host to cluster's config-group.
      summary: POST cluster's config-group host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostAdd'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostAdd'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostAdd'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostCHG'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/hosts/{hostId}/:
    get:
      operationId: getClusterConfigGroupHost
      description: Get information about a specific host of cluster's config-group.
      summary: GET cluster's config-group host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Hostprovider name
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Host name
      - in: query
        name: ordering
        schema:
          type: array
          items:
            type: string
            enum:
            - -hostproviderName
            - -id
            - -name
            - -state
            - hostproviderName
            - id
            - name
            - state
        description: |-
          ordering

          * `name` - Name
          * `-name` - Name (descending)
          * `state` - State
          * `-state` - State (descending)
          * `id` - Id
          * `-id` - Id (descending)
          * `hostproviderName` - Hostprovidername
          * `-hostproviderName` - Hostprovidername (descending)
        explode: false
        style: form
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteClusterConfigGroupHosts
      description: Remove host from cluster's config-group.
      summary: DELETE host from cluster's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/:
    get:
      operationId: getClusterConfigGroup
      description: Get information about cluster's config-group.
      summary: GET cluster's config group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchClusterConfigGroup
      description: Change cluster's config-group's name and description.
      summary: PATCH cluster's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteClusterConfigGroup
      description: Delete specific cluster's config-group.
      summary: DELETE cluster's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/config-schema/:
    get:
      operationId: clusters_config_groups_config_schema_retrieve
      description: |-
        A view mixin that filter object in queryset for the current logged by required permission.

        **Example Usage**::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'articles.view_article'
                ...

        or::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'auth.change_user'
                get_objects_for_user_extra_kwargs = {'use_groups': False}
                ...

        **Class Settings**

        ``PermissionListMixin.permission_required``

            *Default*: ``None``, must be set to either a string or list of strings
            in format: *<app_label>.<permission_codename>*.

        ``PermissionListMixin.get_objects_for_user_extra_kwargs``

            *Default*: ``{}``,  A extra params to pass for ```guardian.shortcuts.get_objects_for_user```
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/{configGroupId}/host-candidates/:
    get:
      operationId: getClusterConfigGroupHostCandidates
      description: Get a list of hosts available for adding to cluster's config group.
      summary: GET cluster's config-group host candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-groups/host-candidates/:
    get:
      operationId: getClusterConfigGroupHostOwnCandidates
      description: Get a list of hosts available for adding to cluster's new config
        group.
      summary: GET cluster's host candidates for new config group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostShort'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/configs/:
    get:
      operationId: getClusterConfigs
      description: Get information about cluster's config versions.
      summary: GET cluster's config versions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterConfigs
      description: Create a new version of cluster's configuration.
      summary: POST cluster's configs
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/configs/{configId}/:
    get:
      operationId: getClusterConfig
      description: Get cluster's configuration information.
      summary: GET cluster's config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/:
    get:
      operationId: getClusterHosts
      description: Get a list of all cluster hosts.
      summary: GET cluster hosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: componentId
        schema:
          type: number
        description: Filter by component id.
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postCusterHosts
      description: Add a new hosts to cluster.
      summary: POST cluster hosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HostAdd'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HostAdd'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HostAdd'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    hostprovider:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        displayName:
                          type: string
                    prototype:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        displayName:
                          type: string
                        version:
                          type: string
                    cluster:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    status:
                      type: string
                    state:
                      type: string
                    multiState:
                      type: array
                      items:
                        type: string
                    concerns:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          type:
                            type: string
                          reason:
                            type: object
                            properties:
                              message:
                                type: string
                              placeholder:
                                type: object
                          isBlocking:
                            type: boolean
                          cause:
                            type: string
                          owner:
                            type: object
                            properties:
                              id:
                                type: integer
                              type:
                                type: string
                    isMaintenanceModeAvailable:
                      type: boolean
                    maintenanceMode:
                      type: string
                    components:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          displayName:
                            type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/actions/:
    get:
      operationId: getHostinclusterActions
      description: Get a list of hostInCluster's actions.
      summary: GET hostInCluster's actions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/actions/{actionId}/:
    get:
      operationId: getHostinclusterAction
      description: Get information about a specific hostInCluster's action.
      summary: GET hostInCluster's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/actions/{actionId}/run/:
    post:
      operationId: postHostinclusterAction
      description: Run hostInCluster's action.
      summary: POST hostInCluster's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/components/:
    get:
      operationId: getHostComponents
      description: Get a list of host components.
      summary: GET host components
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Component id.
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -displayName
          - -name
          - displayName
          - name
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHostComponentList'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/:
    get:
      operationId: getClusterHost
      description: Get information about a specific cluster host.
      summary: GET cluster host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteClusterHost
      description: Unlink host from cluster.
      summary: DELETE cluster host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/maintenance-mode/:
    post:
      operationId: postClusterHostMaintenanceMode
      description: Turn on/off maintenance mode on the cluster host.
      summary: POST cluster host maintenance-mode
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostChangeMaintenanceMode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostChangeMaintenanceMode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostChangeMaintenanceMode'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostChangeMaintenanceMode'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/hosts/{hostId}/statuses/:
    get:
      operationId: getHostStatuses
      description: Get information about cluster host status.
      summary: GET host status
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterHostStatus'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/imports/:
    get:
      operationId: getClusterImports
      description: Get information about cluster imports.
      summary: GET cluster imports
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImportList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterImports
      description: Import data.
      summary: POST cluster imports
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImportPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImportPost'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/:
    get:
      operationId: getClusterServices
      description: Get a list of all services of a particular cluster with information
        on them.
      summary: GET cluster services
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by service display name.
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by service name.
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -displayName
          - displayName
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: status
        schema:
          type: string
          enum:
          - down
          - up
        description: |-
          Filter by service status

          * `up` - up
          * `down` - down
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedServiceRetrieveList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterServices
      description: Add a new cluster services.
      summary: POST cluster services
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServiceCreate'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServiceCreate'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServiceCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    displayName:
                      type: string
                    prototype:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        displayName:
                          type: string
                        version:
                          type: string
                    cluster:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                    status:
                      type: string
                    state:
                      type: string
                    multiState:
                      type: array
                      items:
                        type: string
                    concerns:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          type:
                            type: string
                          reason:
                            type: object
                            properties:
                              message:
                                type: string
                              placeholder:
                                type: object
                          isBlocking:
                            type: boolean
                          cause:
                            type: string
                          owner:
                            type: object
                            properties:
                              id:
                                type: integer
                              type:
                                type: string
                    isMaintenanceModeAvailable:
                      type: boolean
                    maintenanceMode:
                      type: string
                    mainInfo:
                      type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/:
    get:
      operationId: getClusterService
      description: Get information about a specific cluster service.
      summary: GET cluster service
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteClusterService
      description: Delete a specific cluster service.
      summary: DELETE cluster service
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-schema/:
    get:
      operationId: getServiceConfigSchema
      description: Get service's config schema information.
      summary: GET service's config schema
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/maintenance-mode/:
    post:
      operationId: postServiceMaintenanceMode
      description: Turn on/off maintenance mode on the service.
      summary: POST service maintenance-mode
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceMaintenanceMode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ServiceMaintenanceMode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ServiceMaintenanceMode'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMaintenanceMode'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/statuses/:
    get:
      operationId: getComponentStatuses
      description: Get information about component statuses.
      summary: GET component statuses
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/:
    get:
      operationId: getServiceActionHostGroups
      description: Return list of service's action host groups.
      summary: GET service's Action Host Groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hasHost
        schema:
          type: string
        description: Case insensitive and partial filter by host
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActionHostGroupList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceActionHostGroup
      description: Create a new service's action host group.
      summary: POST service's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHostGroup'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/actions/:
    get:
      operationId: getServiceActionHostGroupActions
      description: Get a list of service's action host group's actions.
      summary: GET service's action host group's actions
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/actions/{actionId}/:
    get:
      operationId: getServiceActionHostGroupAction
      description: Get information about a specific service's action host group's
        action.
      summary: GET service's action host group's action
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/actions/{actionId}/run/:
    post:
      operationId: postServiceActionHostGroupAction
      description: Run service's action host group's action.
      summary: POST service's action host group's action
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/hosts/:
    get:
      operationId: getServiceActionHostGroupHosts
      description: Get information about service's Action Host Group hosts.
      summary: GET service's action host group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceActionHostGroupHosts
      description: Add hosts to service's action host group.
      summary: POST service's Action Host Group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddHost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddHost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddHost'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortHost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/hosts/{hostId}/:
    get:
      operationId: clusters_services_action_host_groups_hosts_retrieve
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddHost'
          description: ''
    delete:
      operationId: deleteServiceActionHostGroupHosts
      description: Delete specific host from service's action host group.
      summary: DELETE service's Action Host Group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/:
    get:
      operationId: getServiceActionHostGroup
      description: Return information about specific service's action host group.
      summary: GET service's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHostGroup'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteServiceActionHostGroup
      description: Delete specific service's action host group.
      summary: DELETE service's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/{actionHostGroupId}/host-candidates/:
    get:
      operationId: getServiceActionHostGroupCandidates
      description: Return list of service's hosts that can be added to action host
        group.
      summary: GET service's Action Host Group's host candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/action-host-groups/host-candidates/:
    get:
      operationId: getServiceActionHostGroupOwnCandidates
      description: Return list of service's hosts that can be added to newly created
        action host group.
      summary: GET service's host candidates for new Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/actions/:
    get:
      operationId: getServiceActions
      description: Get a list of service's actions.
      summary: GET service's actions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/actions/{actionId}/:
    get:
      operationId: getServiceAction
      description: Get information about a specific service's action.
      summary: GET service's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/actions/{actionId}/run/:
    post:
      operationId: postServiceAction
      description: Run service's action.
      summary: POST service's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/:
    get:
      operationId: getComponents
      description: Get a list of all components of a particular service with information
        on them.
      summary: GET components
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -displayName
          - -name
          - displayName
          - name
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedComponentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/:
    get:
      operationId: getComponentActionHostGroups
      description: Return list of component's action host groups.
      summary: GET component's Action Host Groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hasHost
        schema:
          type: string
        description: Case insensitive and partial filter by host
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActionHostGroupList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postComponentActionHostGroup
      description: Create a new component's action host group.
      summary: POST component's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionHostGroupCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHostGroup'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/actions/:
    get:
      operationId: getComponentActionHostGroupActions
      description: Get a list of component's action host group's actions.
      summary: GET component's action host group's actions
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  ? /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/actions/{actionId}/
  : get:
      operationId: getComponentActionHostGroupAction
      description: Get information about a specific component's action host group's
        action.
      summary: GET component's action host group's action
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  ? /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/actions/{actionId}/run/
  : post:
      operationId: postComponentActionHostGroupAction
      description: Run component's action host group's action.
      summary: POST component's action host group's action
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/hosts/:
    get:
      operationId: getComponentActionHostGroupHosts
      description: Get information about component's Action Host Group hosts.
      summary: GET component's action host group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postComponentActionHostGroupHosts
      description: Add hosts to component's action host group.
      summary: POST component's Action Host Group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddHost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddHost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddHost'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortHost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  ? /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/hosts/{hostId}/
  : get:
      operationId: clusters_services_components_action_host_groups_hosts_retrieve
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddHost'
          description: ''
    delete:
      operationId: deleteComponentActionHostGroupHosts
      description: Delete specific host from component's action host group.
      summary: DELETE component's Action Host Group hosts
      parameters:
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/:
    get:
      operationId: getComponentActionHostGroup
      description: Return information about specific component's action host group.
      summary: GET component's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHostGroup'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteComponentActionHostGroup
      description: Delete specific component's action host group.
      summary: DELETE component's Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  ? /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/{actionHostGroupId}/host-candidates/
  : get:
      operationId: getComponentActionHostGroupCandidates
      description: Return list of component's hosts that can be added to action host
        group.
      summary: GET component's Action Host Group's host candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: actionHostGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/action-host-groups/host-candidates/:
    get:
      operationId: getComponentActionHostGroupOwnCandidates
      description: Return list of component's hosts that can be added to newly created
        action host group.
      summary: GET component's host candidates for new Action Host Group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortHost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/actions/:
    get:
      operationId: getComponentActions
      description: Get a list of component's actions.
      summary: GET component's actions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/actions/{actionId}/:
    get:
      operationId: getComponentAction
      description: Get information about a specific component's action.
      summary: GET component's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/actions/{actionId}/run/:
    post:
      operationId: postComponentAction
      description: Run component's action.
      summary: POST component's action
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/:
    get:
      operationId: getComponentConfigGroups
      description: Get information about component's config-groups.
      summary: GET component's config groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCHGList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postComponentConfigGroups
      description: Create new component's config-group.
      summary: POST component's config-groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CHG'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/configs/:
    get:
      operationId: getComponentConfigGroupConfigs
      description: Get information about component config group's config versions.
      summary: GET component config group's config versions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postComponentConfigGroupConfigs
      description: Create a new version of component config group's configuration.
      summary: POST component config group's configs
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  ? /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/configs/{configId}/
  : get:
      operationId: getComponentConfigGroupConfig
      description: Get component config group's configuration information.
      summary: GET component config group's config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/hosts/:
    get:
      operationId: getComponentConfigGroupHosts
      description: Get a list of hosts added to component's config-group.
      summary: GET component's config-group hosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postComponentConfigGroupHosts
      description: Add host to component's config-group.
      summary: POST component's config-group host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostAdd'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostAdd'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostAdd'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostCHG'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/hosts/{hostId}/:
    get:
      operationId: getComponentConfigGroupHost
      description: Get information about a specific host of component's config-group.
      summary: GET component's config-group host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Hostprovider name
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Host name
      - in: query
        name: ordering
        schema:
          type: array
          items:
            type: string
            enum:
            - -hostproviderName
            - -id
            - -name
            - -state
            - hostproviderName
            - id
            - name
            - state
        description: |-
          ordering

          * `name` - Name
          * `-name` - Name (descending)
          * `state` - State
          * `-state` - State (descending)
          * `id` - Id
          * `-id` - Id (descending)
          * `hostproviderName` - Hostprovidername
          * `-hostproviderName` - Hostprovidername (descending)
        explode: false
        style: form
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteComponentConfigGroupHosts
      description: Remove host from component's config-group.
      summary: DELETE host from component's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/:
    get:
      operationId: getComponentConfigGroup
      description: Get information about component's config-group.
      summary: GET component's config group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchComponentConfigGroup
      description: Change component's config-group's name and description.
      summary: PATCH component's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteComponentConfigGroup
      description: Delete specific component's config-group.
      summary: DELETE component's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/config-schema/:
    get:
      operationId: clusters_services_components_config_groups_config_schema_retrieve
      description: |-
        A view mixin that filter object in queryset for the current logged by required permission.

        **Example Usage**::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'articles.view_article'
                ...

        or::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'auth.change_user'
                get_objects_for_user_extra_kwargs = {'use_groups': False}
                ...

        **Class Settings**

        ``PermissionListMixin.permission_required``

            *Default*: ``None``, must be set to either a string or list of strings
            in format: *<app_label>.<permission_codename>*.

        ``PermissionListMixin.get_objects_for_user_extra_kwargs``

            *Default*: ``{}``,  A extra params to pass for ```guardian.shortcuts.get_objects_for_user```
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/{configGroupId}/host-candidates/:
    get:
      operationId: getComponentConfigGroupHostCandidates
      description: Get a list of hosts available for adding to component's config
        group.
      summary: GET component's config-group host candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-groups/host-candidates/:
    get:
      operationId: getComponentConfigGroupHostOwnCandidates
      description: Get a list of hosts available for adding to component's new config
        group.
      summary: GET component's host candidates for new config group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostShort'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/configs/:
    get:
      operationId: getComponentConfigs
      description: Get information about component's config versions.
      summary: GET component's config versions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postComponentConfigs
      description: Create a new version of component's configuration.
      summary: POST component's configs
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/configs/{configId}/:
    get:
      operationId: getComponentConfig
      description: Get component's configuration information.
      summary: GET component's config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/:
    get:
      operationId: getComponent
      description: Get information about a specific component.
      summary: GET component
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/config-schema/:
    get:
      operationId: getConfigConfigSchema
      description: Get config's config schema information.
      summary: GET config's config schema
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/maintenance-mode/:
    post:
      operationId: postComponentMaintenanceMode
      description: Turn on/off maintenance mode on the component.
      summary: POST component maintenance-mode
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentMaintenanceMode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ComponentMaintenanceMode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ComponentMaintenanceMode'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentMaintenanceMode'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/components/{componentId}/statuses/:
    get:
      operationId: getHostComponentStatusesOfComponent
      description: Get information about component on hosts statuses.
      summary: GET host-component statuses of component on hoosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: componentId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentStatus'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/:
    get:
      operationId: getServiceConfigGroups
      description: Get information about service's config-groups.
      summary: GET service's config groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCHGList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceConfigGroups
      description: Create new service's config-group.
      summary: POST service's config-groups
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CHG'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/configs/:
    get:
      operationId: getServiceConfigGroupConfigs
      description: Get information about service config group's config versions.
      summary: GET service config group's config versions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceConfigGroupConfigs
      description: Create a new version of service config group's configuration.
      summary: POST service config group's configs
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/configs/{configId}/:
    get:
      operationId: getServiceConfigGroupConfig
      description: Get service config group's configuration information.
      summary: GET service config group's config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/hosts/:
    get:
      operationId: getServiceConfigGroupHosts
      description: Get a list of hosts added to service's config-group.
      summary: GET service's config-group hosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceConfigGroupHosts
      description: Add host to service's config-group.
      summary: POST service's config-group host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostAdd'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostAdd'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostAdd'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostCHG'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/hosts/{hostId}/:
    get:
      operationId: getServiceConfigGroupHost
      description: Get information about a specific host of service's config-group.
      summary: GET service's config-group host
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Hostprovider name
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Host name
      - in: query
        name: ordering
        schema:
          type: array
          items:
            type: string
            enum:
            - -hostproviderName
            - -id
            - -name
            - -state
            - hostproviderName
            - id
            - name
            - state
        description: |-
          ordering

          * `name` - Name
          * `-name` - Name (descending)
          * `state` - State
          * `-state` - State (descending)
          * `id` - Id
          * `-id` - Id (descending)
          * `hostproviderName` - Hostprovidername
          * `-hostproviderName` - Hostprovidername (descending)
        explode: false
        style: form
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteServiceConfigGroupHosts
      description: Remove host from service's config-group.
      summary: DELETE host from service's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/:
    get:
      operationId: getServiceConfigGroup
      description: Get information about service's config-group.
      summary: GET service's config group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchServiceConfigGroup
      description: Change service's config-group's name and description.
      summary: PATCH service's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteServiceConfigGroup
      description: Delete specific service's config-group.
      summary: DELETE service's config-group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/config-schema/:
    get:
      operationId: clusters_services_config_groups_config_schema_retrieve
      description: |-
        A view mixin that filter object in queryset for the current logged by required permission.

        **Example Usage**::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'articles.view_article'
                ...

        or::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'auth.change_user'
                get_objects_for_user_extra_kwargs = {'use_groups': False}
                ...

        **Class Settings**

        ``PermissionListMixin.permission_required``

            *Default*: ``None``, must be set to either a string or list of strings
            in format: *<app_label>.<permission_codename>*.

        ``PermissionListMixin.get_objects_for_user_extra_kwargs``

            *Default*: ``{}``,  A extra params to pass for ```guardian.shortcuts.get_objects_for_user```
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/{configGroupId}/host-candidates/:
    get:
      operationId: getServiceConfigGroupHostCandidates
      description: Get a list of hosts available for adding to service's config group.
      summary: GET service's config-group host candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/config-groups/host-candidates/:
    get:
      operationId: getServiceConfigGroupHostOwnCandidates
      description: Get a list of hosts available for adding to service's new config
        group.
      summary: GET service's host candidates for new config group
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostShort'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/configs/:
    get:
      operationId: getServiceConfigs
      description: Get information about service's config versions.
      summary: GET service's config versions
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceConfigs
      description: Create a new version of service's configuration.
      summary: POST service's configs
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/configs/{configId}/:
    get:
      operationId: getServiceConfig
      description: Get service's configuration information.
      summary: GET service's config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/services/{serviceId}/imports/:
    get:
      operationId: getServiceImports
      description: Get information about service imports.
      summary: GET service imports
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImportList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postServiceImports
      description: Import data.
      summary: POST service imports
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: serviceId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImportPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImportPost'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/upgrades/:
    get:
      operationId: getClusterUpgrades
      description: Get a list of all cluster's upgrades.
      summary: GET cluster upgrades
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpgradeList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/upgrades/{upgradeId}/:
    get:
      operationId: getClusterUpgrade
      description: Get information about a specific cluster's upgrade.
      summary: GET cluster upgrade
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: upgradeId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/upgrades/{upgradeId}/run/:
    post:
      operationId: postClusterUpgrade
      description: Run cluster's upgrade.
      summary: POST cluster's upgrade
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: upgradeId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpgradeRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpgradeRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/:
    get:
      operationId: getCluster
      description: Get information about a specific cluster.
      summary: GET cluster
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchCluster
      description: Change cluster name.
      summary: PATCH cluster
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedClusterUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedClusterUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedClusterUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteCluster
      description: Delete a specific ADCM cluster.
      summary: DELETE cluster
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/ansible-config/:
    get:
      operationId: getClusterAnsibleConfigs
      description: Get information about cluster ansible config.
      summary: GET cluster ansible configuration
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnsibleConfigRetrieve'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postClusterAnsibleConfigs
      description: Create ansible configuration.
      summary: POST cluster ansible config
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnsibleConfigUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnsibleConfigUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnsibleConfigUpdate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnsibleConfigRetrieve'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/ansible-config-schema/:
    get:
      operationId: getClusterAnsibleConfigsSchema
      description: Get information about cluster ansible config schema.
      summary: GET cluster ansible configuration schema
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/config-schema/:
    get:
      operationId: getClusterConfigSchema
      description: Get cluster's config schema information.
      summary: GET cluster's config schema
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/mapping/:
    get:
      operationId: getHostComponentMapping
      description: Get information about host and component mapping.
      summary: GET host component mapping
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mapping'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostComponentMapping
      description: Save host and component mapping information.
      summary: POST host component mapping
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SetMapping'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SetMapping'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SetMapping'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mapping'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/mapping/components/:
    get:
      operationId: getMappingComponents
      description: Get a list of components to map.
      summary: GET mapping components
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentMapping'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/mapping/hosts/:
    get:
      operationId: getMappingHosts
      description: Get a list of hosts to map.
      summary: GET mapping hosts
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostMapping'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/service-candidates/:
    get:
      operationId: getServiceCandidates
      description: Get service prototypes that can be added to this cluster.
      summary: GET service candidates
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePrototype'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/service-prototypes/:
    get:
      operationId: getServicePrototypes
      description: Get service prototypes that is related to this cluster.
      summary: GET service prototypes
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePrototype'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/statuses/hosts/:
    get:
      operationId: getClusterHostStatuses
      description: Get information about cluster hosts statuses.
      summary: Get information about cluster hosts statuses.
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: integer
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a '-'.
      - in: query
        name: status
        schema:
          type: string
          enum:
          - down
          - up
        description: Filter by status
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRelatedHostsStatusesList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/clusters/{clusterId}/statuses/services/:
    get:
      operationId: getClusterServiceStatuses
      description: Get information about cluster service statuses.
      summary: Get information about cluster service statuses.
      parameters:
      - in: path
        name: clusterId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: integer
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a '-'.
      - in: query
        name: status
        schema:
          type: string
          enum:
          - down
          - up
        description: Filter by status
      tags:
      - clusters
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRelatedServicesStatusesList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/concerns/{concernId}/:
    delete:
      operationId: deleteConcern
      description: Remove non blocking concern.
      summary: Remove non-blocking concern
      parameters:
      - in: path
        name: concernId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - concerns
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/:
    get:
      operationId: getHostproviders
      description: Get a list of ADCM hostproviders with information on them.
      summary: GET hostproviders
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by hostprovider name.
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -name
          - name
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeDisplayName
        schema:
          type: string
        description: Filter by prototype display name.
      - in: query
        name: state
        schema:
          type: string
        description: Filter by state.
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProviderSchemaList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostproviders
      description: Creation of a new ADCM hostprovider.
      summary: POST hostproviders
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProviderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProviderCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderSchema'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{hostproviderId}/:
    get:
      operationId: getHostprovider
      description: Get information about a specific hostprovider.
      summary: GET hostprovider
      parameters:
      - in: path
        name: hostproviderId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteHostprovider
      description: Delete a specific ADCM hostprovider.
      summary: DELETE hostprovider
      parameters:
      - in: path
        name: hostproviderId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{hostproviderId}/config-schema/:
    get:
      operationId: getProviderConfigSchema
      description: Get provider's config schema information.
      summary: GET provider's config schema
      parameters:
      - in: path
        name: hostproviderId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/actions/:
    get:
      operationId: getHostproviderActions
      description: Get a list of hostprovider's actions.
      summary: GET hostprovider's actions
      parameters:
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/actions/{actionId}/:
    get:
      operationId: getHostproviderAction
      description: Get information about a specific hostprovider's action.
      summary: GET hostprovider's action
      parameters:
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/actions/{actionId}/run/:
    post:
      operationId: postHostproviderAction
      description: Run hostprovider's action.
      summary: POST hostprovider's action
      parameters:
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/:
    get:
      operationId: getHostproviderConfigGroups
      description: Get information about hostprovider's config-groups.
      summary: GET hostprovider's config groups
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCHGList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostproviderConfigGroups
      description: Create new hostprovider's config-group.
      summary: POST hostprovider's config-groups
      parameters:
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CHG'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/configs/:
    get:
      operationId: getHostProviderConfigGroupConfigs
      description: Get information about hostprovider config group's config versions.
      summary: GET hostprovider config group's config versions
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostProviderConfigGroupConfigs
      description: Create a new version of hostprovider config group's configuration.
      summary: POST hostprovider config group's configs
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/configs/{configId}/:
    get:
      operationId: getHostProviderConfigGroupConfig
      description: Get hostprovider config group's configuration information.
      summary: GET hostprovider config group's config
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/hosts/:
    get:
      operationId: getHostproviderConfigGroupHosts
      description: Get a list of hosts added to hostprovider's config-group.
      summary: GET hostprovider's config-group hosts
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostproviderConfigGroupHosts
      description: Add host to hostprovider's config-group.
      summary: POST hostprovider's config-group host
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostAdd'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostAdd'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostAdd'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostCHG'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/hosts/{hostId}/:
    get:
      operationId: getHostproviderConfigGroupHost
      description: Get information about a specific host of hostprovider's config-group.
      summary: GET hostprovider's config-group host
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Hostprovider name
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Host name
      - in: query
        name: ordering
        schema:
          type: array
          items:
            type: string
            enum:
            - -hostproviderName
            - -id
            - -name
            - -state
            - hostproviderName
            - id
            - name
            - state
        description: |-
          ordering

          * `name` - Name
          * `-name` - Name (descending)
          * `state` - State
          * `-state` - State (descending)
          * `id` - Id
          * `-id` - Id (descending)
          * `hostproviderName` - Hostprovidername
          * `-hostproviderName` - Hostprovidername (descending)
        explode: false
        style: form
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteHostproviderConfigGroupHosts
      description: Remove host from hostprovider's config-group.
      summary: DELETE host from hostprovider's config-group
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/:
    get:
      operationId: getHostproviderConfigGroup
      description: Get information about hostprovider's config-group.
      summary: GET hostprovider's config group
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchHostproviderConfigGroup
      description: Change hostprovider's config-group's name and description.
      summary: PATCH hostprovider's config-group
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCHG'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteHostproviderConfigGroup
      description: Delete specific hostprovider's config-group.
      summary: DELETE hostprovider's config-group
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/config-schema/:
    get:
      operationId: hostproviders_config_groups_config_schema_retrieve
      description: |-
        A view mixin that filter object in queryset for the current logged by required permission.

        **Example Usage**::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'articles.view_article'
                ...

        or::

            class SecureView(PermissionListMixin, ListView):
                ...
                permission_required = 'auth.change_user'
                get_objects_for_user_extra_kwargs = {'use_groups': False}
                ...

        **Class Settings**

        ``PermissionListMixin.permission_required``

            *Default*: ``None``, must be set to either a string or list of strings
            in format: *<app_label>.<permission_codename>*.

        ``PermissionListMixin.get_objects_for_user_extra_kwargs``

            *Default*: ``{}``,  A extra params to pass for ```guardian.shortcuts.get_objects_for_user```
      parameters:
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CHG'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/{configGroupId}/host-candidates/:
    get:
      operationId: getHostproviderConfigGroupHostCandidates
      description: Get a list of hosts available for adding to hostprovider's config
        group.
      summary: GET hostprovider's config-group host candidates
      parameters:
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: path
        name: configGroupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostCHG'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/config-groups/host-candidates/:
    get:
      operationId: getHostproviderConfigGroupHostOwnCandidates
      description: Get a list of hosts available for adding to hostprovider's new
        config group.
      summary: GET hostprovider's host candidates for new config group
      parameters:
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -hostproviderName
          - -id
          - -name
          - -state
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostShort'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/configs/:
    get:
      operationId: getHostproviderConfigs
      description: Get information about hostprovider's config versions.
      summary: GET hostprovider's config versions
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostproviderConfigs
      description: Create a new version of hostprovider's configuration.
      summary: POST hostprovider's configs
      parameters:
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/configs/{configId}/:
    get:
      operationId: getHostproviderConfig
      description: Get hostprovider's configuration information.
      summary: GET hostprovider's config
      parameters:
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/upgrades/:
    get:
      operationId: getHostproviderUpgrades
      description: Get a list of all hostprovider's upgrades.
      summary: GET hostprovider upgrades
      parameters:
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpgradeList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/upgrades/{upgradeId}/:
    get:
      operationId: getHostproviderUpgrade
      description: Get information about a specific hostprovider's upgrade.
      summary: GET hostprovider upgrade
      parameters:
      - in: path
        name: upgradeId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hostproviders/{providerId}/upgrades/{upgradeId}/run/:
    post:
      operationId: postHostproviderUpgrade
      description: Run hostprovider's upgrade.
      summary: POST hostprovider's upgrade
      parameters:
      - in: path
        name: upgradeId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: providerId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hostproviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpgradeRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpgradeRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/:
    get:
      operationId: getHosts
      description: Get a list of all hosts.
      summary: GET hosts
      parameters:
      - in: query
        name: clusterName
        schema:
          type: string
        description: Filter by cluster name.
      - in: query
        name: hostproviderName
        schema:
          type: string
        description: Filter by hostprovider name.
      - in: query
        name: isInCluster
        schema:
          type: boolean
        description: Filter by is host in cluster.
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by host name.
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -clusterName
          - -hostproviderName
          - -id
          - -name
          - -state
          - clusterName
          - hostproviderName
          - id
          - name
          - state
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHostList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHosts
      description: Create a new hosts.
      summary: POST hosts
      tags:
      - hosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/actions/:
    get:
      operationId: getHostActions
      description: Get a list of host's actions.
      summary: GET host's actions
      parameters:
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by display name.
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: isHostOwnAction
        schema:
          type: boolean
        description: Filter for host's own actions / actions from another objects
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by name.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -id
          - id
          default: id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: prototypeId
        schema:
          type: integer
        description: Identifier of action's owner
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/actions/{actionId}/:
    get:
      operationId: getHostAction
      description: Get information about a specific host's action.
      summary: GET host's action
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/actions/{actionId}/run/:
    post:
      operationId: postHostAction
      description: Run host's action.
      summary: POST host's action
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: actionId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionRun'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActionRun'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActionRun'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/configs/:
    get:
      operationId: getHostConfigs
      description: Get information about host's config versions.
      summary: GET host's config versions
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Case insensitive and partial filter by description.
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -description
          - -id
          - description
          - id
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigLogListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postHostConfigs
      description: Create a new version of host's configuration.
      summary: POST host's configs
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConfigLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigLog'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/configs/{configId}/:
    get:
      operationId: getHostConfig
      description: Get host's configuration information.
      summary: GET host's config
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: configId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigLog'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/:
    get:
      operationId: getHost
      description: Get information about a specific host.
      summary: GET host
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchHost
      description: Change host Information.
      summary: PATCH host
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHostUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHostUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHostUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteHost
      description: Delete host from ADCM.
      summary: DELETE host
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/config-schema/:
    get:
      operationId: getHostConfigSchema
      description: Get host's config schema information.
      summary: GET host's config schema
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
              examples:
                SchemaExample:
                  value:
                    $schema: https://json-schema.org/draft/2020-12/schema
                    title: Configuration
                    description: ''
                    readOnly: false
                    adcmMeta:
                      isAdvanced: false
                      isInvisible: false
                      activation: null
                      synchronization: null
                      nullValue: null
                      isSecret: false
                      stringExtra: null
                      enumExtra: null
                    type: object
                    properties:
                      param_1:
                        title: Special Param
                        type: string
                        description: ''
                        default: heh
                        readOnly: true
                        adcmMeta:
                          isAdvanced: true
                          isInvisible: false
                    additionalProperties: false
                    required: []
                  summary: schema example
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/hosts/{hostId}/maintenance-mode/:
    post:
      operationId: postHostMaintenanceMode
      description: Turn on/off maintenance mode on the host.
      summary: POST host maintenance-mode
      parameters:
      - in: path
        name: hostId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - hosts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostChangeMaintenanceMode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HostChangeMaintenanceMode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostChangeMaintenanceMode'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostChangeMaintenanceMode'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/jobs/:
    get:
      operationId: getJobs
      description: Get a list of ADCM jobs.
      summary: GET jobs
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      tags:
      - jobs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobListList'
          description: ''
  /api/v2/jobs/{jobId}/logs/:
    get:
      operationId: getLogstorage
      description: Contains job's logs storage.
      summary: GET logs storage
      parameters:
      - in: path
        name: jobId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - jobs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogStorage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/jobs/{jobId}/logs/{logId}/:
    get:
      operationId: getJobslog
      description: Contains logs by job.
      summary: GET job's log
      parameters:
      - in: path
        name: logId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: path
        name: jobId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - jobs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogStorage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/jobs/{jobId}/logs/{logId}/download/:
    get:
      operationId: getJobLogDownload
      description: Download specific job log.
      summary: GET job log download
      parameters:
      - in: path
        name: logId
        schema:
          type: integer
        description: Log id.
        required: true
      - in: path
        name: jobId
        schema:
          type: integer
        description: Job id.
        required: true
      - in: path
        name: jobId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - jobs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/jobs/{jobId}/:
    get:
      operationId: getJob
      description: Get information about a specific ADCM job.
      summary: GET job
      parameters:
      - in: path
        name: jobId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - jobs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobRetrieve'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/jobs/{jobId}/terminate/:
    post:
      operationId: postJobTerminate
      description: Terminate the execution of a specific job.
      summary: POST job terminate
      parameters:
      - in: path
        name: jobId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - jobs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/login/:
    post:
      operationId: postLogin
      description: Perform authorization in ADCM.
      summary: POST login
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/logout/:
    post:
      operationId: postLogout
      description: Perform logout from ADCM.
      summary: POST logout
      tags:
      - logout
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/profile/:
    get:
      operationId: getCurrentUserInfo
      description: Get current user information.
      summary: GET current user information
      tags:
      - profile
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchCurrentUserInfo
      description: Change current user password.
      summary: PATCH current user information
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdate'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/prototypes/:
    get:
      operationId: getPrototypes
      description: Get a list of all prototypes.
      parameters:
      - in: query
        name: bundleId
        schema:
          type: integer
        description: Filter by bundle ID.
      - in: query
        name: displayName
        schema:
          type: string
        description: Filter by display name.
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by ID.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: type
        schema:
          type: string
          enum:
          - cluster
          - component
          - host
          - provider
          - service
        description: Filter by type.
      tags:
      - prototypes
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPrototypeList'
          description: ''
  /api/v2/prototypes/{prototypeId}/:
    get:
      operationId: getPrototype
      description: Get detail information about a specific prototype.
      parameters:
      - in: query
        name: bundleId
        schema:
          type: integer
        description: Bundle ID
      - in: query
        name: displayName
        schema:
          type: string
        description: Display name
      - in: path
        name: prototypeId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: type
        schema:
          type: string
          enum:
          - adcm
          - cluster
          - component
          - host
          - provider
          - service
        description: |-
          Type

          * `adcm` - adcm
          * `cluster` - cluster
          * `service` - service
          * `component` - component
          * `provider` - provider
          * `host` - host
      tags:
      - prototypes
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPrototypeList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/prototypes/{prototypeId}/license/accept/:
    post:
      operationId: postLicense
      description: Accept prototype license.
      parameters:
      - in: path
        name: prototypeId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - prototypes
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/prototypes/versions/:
    get:
      operationId: getPrototypeVersions
      description: Get a list of ADCM bundles when creating an object (cluster or
        provider).
      parameters:
      - in: query
        name: type
        schema:
          type: string
          enum:
          - cluster
          - provider
        description: Filter by prototype type.
      tags:
      - prototypes
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrototypeVersions'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/groups/:
    get:
      operationId: getGroups
      description: Get information about ADCM user groups.
      summary: GET groups
      parameters:
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by group display name.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -displayName
          - displayName
          default: displayName
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: type
        schema:
          type: string
          enum:
          - ldap
          - local
        description: Group type.
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postGroups
      description: Create a new ADCM user group.
      summary: POST groups
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/groups/{groupId}/:
    get:
      operationId: getGroup
      description: Get information about a specific ADCM user group.
      summary: GET group
      parameters:
      - in: path
        name: groupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchGroup
      description: Change user group information.
      summary: PATCH group
      parameters:
      - in: path
        name: groupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroupUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroupUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroupUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteGroup
      description: Delete groups from ADCM.
      summary: DELETE group
      parameters:
      - in: path
        name: groupId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/policies/:
    get:
      operationId: getPolicies
      description: Get information about ADCM policies.
      summary: GET policies
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: name
        schema:
          type: string
        description: Case insensitive and partial filter by policy name.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -name
          - name
          default: name
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPolicyList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postPolicies
      description: Create a new ADCM policy.
      summary: POST policies
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PolicyCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PolicyCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/policies/{policieId}/:
    get:
      operationId: getPolicy
      description: Get information about a specific ADCM policy.
      summary: GET policy
      parameters:
      - in: path
        name: policieId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchPolicy
      description: Change information on a specific ADCM policy.
      summary: PATCH policy
      parameters:
      - in: path
        name: policieId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPolicyUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPolicyUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPolicyUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deletePolicy
      description: Delete specific ADCM policy.
      summary: DELETE policy
      parameters:
      - in: path
        name: policieId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/roles/:
    get:
      operationId: getRoles
      description: Get information about user roles in ADCM.
      summary: GET roles
      parameters:
      - in: query
        name: categories
        schema:
          type: string
        description: Filter by a comma-separated list of categories in the role.
      - in: query
        name: displayName
        schema:
          type: string
        description: Case insensitive and partial filter by role display name.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -displayName
          - displayName
          default: displayName
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: type
        schema:
          type: string
          enum:
          - business
          - role
        description: Filter by type.
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoleList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    post:
      operationId: postRoles
      description: Create a new user role in ADCM.
      summary: POST roles
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoleCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoleCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/roles/{roleId}/:
    get:
      operationId: getRole
      description: Get information about a specific ADCM user role.
      summary: GET role
      parameters:
      - in: path
        name: roleId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchRole
      description: Change information about the ADCM user role.
      summary: PATCH role
      parameters:
      - in: path
        name: roleId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoleUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoleUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoleUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleCreate'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteRole
      description: Delete a specific ADCM user role.
      summary: DELETE role
      parameters:
      - in: path
        name: roleId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/roles/{roleId}/object-candidates/:
    get:
      operationId: getCandidateobject
      description: Get information about objects which are might be chosen in policy
        for concrete role.
      summary: GET Candidate
      parameters:
      - in: path
        name: roleId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleObjectCandidates'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/roles/categories/:
    get:
      operationId: getCategories
      description: Get information about objects which are might be chosen in policy
        for concrete role.
      summary: GET Categories
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleCreate'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/users/:
    get:
      operationId: getUsers
      description: Get a list of ADCM users with information on them.
      summary: GET users
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -username
          - username
          default: username
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - blocked
        description: User status.
      - in: query
        name: type
        schema:
          type: string
          enum:
          - ldap
          - local
        description: User type.
      - in: query
        name: username
        schema:
          type: string
        description: Case insensitive and partial filter by user name.
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: postUsers
      description: Create a new ADCM user.
      summary: POST users
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/users/{userId}/:
    get:
      operationId: getUser
      description: Get detailed information about a specific user.
      summary: GET user
      parameters:
      - in: path
        name: userId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: patchUser
      description: Change information for a specific user.
      summary: PATCH user
      parameters:
      - in: path
        name: userId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdate'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    delete:
      operationId: deleteUser
      description: Delete user from ADCM.
      summary: DELETE user
      parameters:
      - in: path
        name: userId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/users/{userId}/block/:
    post:
      operationId: postUsersBlock
      description: Block users in the ADCM (manual block).
      summary: POST user block
      parameters:
      - in: path
        name: userId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/rbac/users/{userId}/unblock/:
    post:
      operationId: postUsersUnblock
      description: Unblock the user in the ADCM.
      summary: POST user unblock
      parameters:
      - in: path
        name: userId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - rbac
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/tasks/:
    get:
      operationId: getTasks
      description: Get a list of ADCM tasks.
      summary: GET tasks
      parameters:
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by id.
      - in: query
        name: jobName
        schema:
          type: string
        description: Case insensitive and partial filter by job name.
      - in: query
        name: limit
        schema:
          type: integer
        description: Number of records included in the selection.
      - in: query
        name: objectName
        schema:
          type: string
        description: Case insensitive and partial filter by object name.
      - in: query
        name: offset
        schema:
          type: integer
        description: Record number from which the selection starts.
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -endTime
          - -id
          - -name
          - -startTime
          - endTime
          - id
          - name
          - startTime
          default: -id
        description: Field to sort by. To sort in descending order, precede the attribute
          name with a "-".
      - in: query
        name: status
        schema:
          type: string
          enum:
          - aborted
          - broken
          - created
          - failed
          - locked
          - running
          - success
        description: Filter by status.
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskListList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/tasks/{taskId}/:
    get:
      operationId: getTask
      description: Get information about a specific ADCM task.
      summary: GET task
      parameters:
      - in: path
        name: taskId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/tasks/{taskId}/logs/download/:
    get:
      operationId: getTaskLogsDownload
      description: Download all task logs.
      summary: GET task logs download
      parameters:
      - in: path
        name: taskId
        schema:
          type: integer
        description: Task id.
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/tar+gzip:
              schema:
                type: string
                format: binary
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/tasks/{taskId}/terminate/:
    post:
      operationId: postTaskTerminate
      description: Terminate the execution of a specific task.
      summary: POST task terminate
      parameters:
      - in: path
        name: taskId
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/v2/token/:
    post:
      operationId: acquireToken
      description: Get user token.
      summary: POST login
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
